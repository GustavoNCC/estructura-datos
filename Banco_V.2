package banco_2;

import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Scanner;
//TOME INSPIRACION DE LA LOGICA DE MI COMPAÑERO GABRIEL, PORQUE ME DI CUENTA QUE COMO TENIAEL CODIGO ANTES SE ME HIBA A DIFICULTAR LAS PRIORIDADES,ETC.
//USE CHAT-GPT PARA PODER USAR EL PriorityQueue y Comparator

public class principal_banco_2 {

    public static void main(String[] args) {
        Banco banco = new Banco();
        Scanner scanner = new Scanner(System.in);
        int opcion;
        do {
            System.out.println("Menú:");
            System.out.println("1. Agregar cliente con cuenta");
            System.out.println("2. Agregar cliente sin cuenta");
            System.out.println("3. Atender cliente");
            System.out.println("4. Ver estado de las cajas");
            System.out.println("5. Ingresar dinero a caja");
            System.out.println("6. Imprimir estado del banco");
            System.out.println("7. Salir");
            System.out.print("Elige una opción: ");
            opcion = scanner.nextInt();

            switch (opcion) {
                case 1:
                    System.out.print("Ingresa el número de cuenta del cliente: ");
                    int numeroCuenta = scanner.nextInt();
                    Cliente clienteConCuenta = new Cliente(true, numeroCuenta);
                    banco.preguntarYAsignarTarea(clienteConCuenta);
                    banco.agregarCliente(clienteConCuenta);
                    break;
                case 2:
                    Cliente clienteSinCuenta = new Cliente(false, -1);
                    banco.preguntarYAsignarTarea(clienteSinCuenta);
                    banco.agregarCliente(clienteSinCuenta);
                    break;
                case 3:
                    banco.imprimirEstadoCajas();
                    System.out.print("Elige la caja (1-4) para atender: ");
                    int numCaja = scanner.nextInt();
                    banco.atenderCliente(numCaja);
                    break;
                case 4:
                    banco.imprimirEstadoCajas();
                    break;
                case 5:
                    System.out.print("Elige la caja (1-4): ");
                    int cajaNum = scanner.nextInt();
                    System.out.print("Ingresa el tipo de billete/moneda: ");
                    double tipo = scanner.nextDouble();
                    System.out.print("Ingresa la cantidad: ");
                    int cantidad = scanner.nextInt();
                    banco.ingresarDineroCaja(cajaNum, tipo, cantidad);
                    break;
                case 6:
                    banco.imprimirEstadoBanco();
                    break;
                case 7:
                    System.out.println("Saliendo...");
                    break;
                default:
                    System.out.println("Opción no válida.");
            }
        } while (opcion != 7);
        scanner.close();
    }
}

class Cliente {
    boolean tieneCuenta;
    int id;
    int numeroCuenta;
    long tiempoLlegada;
    String tarea;
    static int idCounter = 1;

    Cliente(boolean tieneCuenta, int numeroCuenta) {
        this.tieneCuenta = tieneCuenta;
        this.id = idCounter++;
        this.numeroCuenta = numeroCuenta;
        this.tiempoLlegada = System.currentTimeMillis();
    }
}

class Caja {
    boolean ocupada;
    Cliente clienteActual;
    double[] tipos = {0.50, 1, 2, 5, 10, 20, 100, 200, 500, 1000};
    int[] cantidades = new int[tipos.length];

    public Caja() {
        for (int i = 0; i < tipos.length; i++) {
            cantidades[i] = 5;
        }
    }

    public void depositar(double tipo, int cantidad) {
        for (int i = 0; i < tipos.length; i++) {
            if (tipos[i] == tipo) {
                cantidades[i] += cantidad;
                break;
            }
        }
    }

    public boolean retirar(double monto) {
        double total = 0;
        for (int i = 0; i < tipos.length; i++) {
            total += tipos[i] * cantidades[i];
        }
        if (monto > total) {
            System.out.println("No hay suficiente dinero en la caja.");
            return false;
        }
        for (int i = tipos.length - 1; i >= 0; i--) {
            while (monto >= tipos[i] && cantidades[i] > 0) {
                monto -= tipos[i];
                cantidades[i]--;
            }
        }
        if (monto > 0) {
            System.out.println("No se pudo retirar el monto exacto.");
            return false;
        }
        return true;
    }
}

class Banco {
    PriorityQueue<Cliente> clientesConCuenta;
    PriorityQueue<Cliente> clientesSinCuenta;
    Caja[] cajas = {new Caja(), new Caja(), new Caja(), new Caja()};

    public Banco() {
        clientesConCuenta = new PriorityQueue<>(Comparator.comparingLong(c -> c.tiempoLlegada));
        clientesSinCuenta = new PriorityQueue<>(Comparator.comparingLong(c -> c.tiempoLlegada));
    }

    public void agregarCliente(Cliente cliente) {
        if (cliente.tieneCuenta) {
            clientesConCuenta.add(cliente);
            System.out.println("Cliente con cuenta agregado a la cola. ID: " + cliente.id);
        } else {
            clientesSinCuenta.add(cliente);
            System.out.println("Cliente sin cuenta agregado a la cola. ID: " + cliente.id);
        }
    }

    public void preguntarYAsignarTarea(Cliente cliente) {
        Scanner read = new Scanner(System.in);
        System.out.println("Cliente ID: " + cliente.id);
        System.out.println("1. Depósito");
        System.out.println("2. Retiro");
        System.out.print("Elige una opción: ");
        int opcion = read.nextInt();
        switch (opcion) {
            case 1:
                cliente.tarea = "Depósito";
                break;
            case 2:
                cliente.tarea = "Retiro";
                break;
            default:
                System.out.println("Opción no válida. Se asignará 'Depósito' por defecto.");
                cliente.tarea = "Depósito";
        }
    }

    public void atenderCliente(int numCaja) {
        if (numCaja < 1 || numCaja > 4) {
            System.out.println("Número de caja no válido.");
            return;
        }
        Caja caja = cajas[numCaja - 1];
        if (caja.ocupada) {
            System.out.println("La caja " + numCaja + " está ocupada.");
            return;
        }
        Cliente cliente = obtenerSiguienteCliente();
        if (cliente != null) {
            caja.ocupada = true;
            caja.clienteActual = cliente;
            Scanner read = new Scanner(System.in);
            System.out.println("Atendiendo cliente ID: " + cliente.id + " en la caja " + numCaja);
            switch (cliente.tarea) {
                case "Depósito":
                    System.out.print("Ingresa el tipo de billete/moneda: ");
                    double tipo = read.nextDouble();
                    System.out.print("Ingresa la cantidad: ");
                    int cantidad = read.nextInt();
                    caja.depositar(tipo, cantidad);
                    break;
                case "Retiro":
                    System.out.print("Ingresa el monto a retirar: ");
                    double monto = read.nextDouble();
                    if (caja.retirar(monto)) {
                        System.out.println("Retiro exitoso.");
                    } else {
                        System.out.println("Retiro fallido.");
                    }
                    break;
                default:
                    System.out.println("Tarea no válida.");
            }
            caja.ocupada = false;
            caja.clienteActual = null;
        } else {
            System.out.println("No hay clientes en la cola.");
        }
    }

    public Cliente obtenerSiguienteCliente() {
        if (!clientesConCuenta.isEmpty()) {
            return clientesConCuenta.poll();
        } else if (!clientesSinCuenta.isEmpty()) {
            return clientesSinCuenta.poll();
        } else {
            return null;
        }
    }

    public void ingresarDineroCaja(int numCaja, double tipo, int cantidad) {
        if (numCaja < 1 || numCaja > 4) {
            System.out.println("Número de caja no válido.");
            return;
        }
        cajas[numCaja - 1].depositar(tipo, cantidad);
        System.out.println("Dinero ingresado a la caja " + numCaja);
    }

    public void imprimirEstadoBanco() {
        System.out.println("Estado del banco:");
        System.out.println("Clientes con cuenta en cola: " + clientesConCuenta.size());
        System.out.println("Clientes sin cuenta en cola: " + clientesSinCuenta.size());
    }

    public void imprimirEstadoCajas() {
        for (int i = 0; i < cajas.length; i++) {
            System.out.println("Caja " + (i + 1) + " - Ocupada: " + cajas[i].ocupada + 
                               (cajas[i].ocupada ? " - Atendiendo al cliente ID: " + cajas[i].clienteActual.id : ""));
        }
    }
}
